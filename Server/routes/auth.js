const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");
const User = mongoose.model("User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const {JWT_SECRET} =  require('../keys');
const requireLogin = require("../middleware/requireLogin");



// protected API ðŸ‘‡ðŸ‘‡ðŸ‘‡

router.get("/protected",requireLogin,(req,res)=>{   // requireLogin is middleware here...
    res.send("Hello captain.")
})

// signup API ðŸ‘‡ðŸ‘‡ðŸ‘‡

router.post("/signup",(req,res)=>{
    const {name,email,password} = req.body;

    if(!email || !password || !name){
        return res.status(422).json({error:"Please add all the fields."})
    }
    User.findOne({email:email})
    .then((savedUser)=>{
        if(savedUser){
            return res.status(422).json({error:"User has already exists."})
        }

        bcrypt.hash(password,12)  // this is for salting/hashing the password...  here 12 is length and defualt is 10.

        .then(hashedPassword=>{
            const user = new User({
                email:email,
                password:hashedPassword,
                name:name
            })
    
            user.save()
            .then(user=>{
                res.json({message:"Data saved successfuly."})
            })
            .catch(err=>{
                console.log(err);
            })
        })

    })

    .catch(err=>{
        console.log(err);
    })
})

// signIn API ðŸ‘‡ðŸ‘‡ðŸ‘‡

router.post("/signin",(req,res)=>{
    const {email,password} = req.body;
    if(!email || !password){
        return res.status(422).json({error:"All fields are required."});
    }
    User.findOne({email:email})  // find email from database...
    .then(savedUser=>{
        if(!savedUser){
            res.status(422).json({error:"Inavlid email or password."});
        }
        bcrypt.compare(password,savedUser.password)   // for comapring user password with saved password... It will return boolean value.

        .then(doMatch=>{  // here doMatch will recieve boolean value.
            if(doMatch){
                // res.json({message:"Signed In successfuly."})
                const token = jwt.sign({_id:savedUser._id},JWT_SECRET)   // it will provide token to the user...
                const {_id,name,email} = savedUser;
                res.json({token,User:{_id,name,email}})
            }
            else{
                res.status(422).json({error:"Invalid email or password."})
            }
        })
        .catch(err=>{    // this error is for developers use. It is not generated by the user.
            console.log(err);
        })
    })
})

module.exports = router;